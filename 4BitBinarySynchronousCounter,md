Desigb File:-
module counter_4bit (
  input clk,
  input rst,        // Active-high synchronous reset
  input en,         // Enable signal
  output reg [3:0] count
);
  always @(posedge clk) begin
    if (rst)
      count <= 4'b0000;       // Reset counter to 0
    else if (en)
      count <= count + 1;     // Increment if enabled
  end
endmodule

Testbench file:-
module tb_counter_4bit;
  reg clk;
  reg rst;
  reg en;
  wire [3:0] count;

  counter_4bit uut (
    .clk(clk),
    .rst(rst),
    .en(en),
    .count(count)
  );

  // Clock generation (period = 10 units)
  initial clk = 0;
  always #5 clk = ~clk;

  initial begin
    $display("Time | rst en count");

    // Initial values
    rst = 1; en = 0; #10; // apply reset
    $display("%4t |  %b   %b   %d", $time, rst, en, count);

    rst = 0; en = 1; #50; // count while enabled
    $display("%4t |  %b   %b   %d", $time, rst, en, count);

    en = 0; #20; // stop counting
    $display("%4t |  %b   %b   %d", $time, rst, en, count);

    rst = 1; #10; // reset again
    $display("%4t |  %b   %b   %d", $time, rst, en, count);

    $finish;
  end
endmodule

